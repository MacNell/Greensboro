plot.title=title("Contour plot",xlab="Temperature",ylab="Lag"),ylim=c(0,4))
mycrosspred(pred3.temp, "overall", xlab="Temperature", key.title=title("RR"),
plot.title=title("Contour plot",xlab="Temperature",ylab="Lag"),ylim=c(0,4))
mycrosspred(pred3.temp, "overall", xlab="Temperature", key.title=title("RR"),
plot.title=title("Contour plot",xlab="Temperature",ylab="Lag"),ylim=c(0,4),ref=NULL)
mycrosspred(pred3.temp, "overall", xlab="Temperature", key.title=title("RR"),
plot.title=title("Contour plot",xlab="Temperature",ylab="Lag"),ylim=c(0,4),ref=NULL)
mycrosspred(pred3.temp, "overall", xlab="Temperature", key.title=title("RR"),
plot.title=title("Contour plot",xlab="Temperature",ylab="Lag"),ylim=c(0,4),ref=1)
mycrosspred(pred3.temp, "overall", xlab="Temperature", key.title=title("RR"),
plot.title=title("Contour plot",xlab="Temperature",ylab="Lag"),ylim=c(0,4),ref=1)
mycrosspred(pred3.temp, "overall", xlab="Temperature", key.title=title("RR"),
plot.title=title("Contour plot",xlab="Temperature",ylab="Lag"),ylim=c(0,4),ref=1)
source('D:/LearnR/Laurel/mycrosspred.R', echo=TRUE)
dput(fci)
fci <- function (ci, x, high, low, ci.arg, plot.arg, noeff = NULL)
{
if (ci == "area") {
polygon.arg <- modifyList(list(col = grey(0.9), border = NA),
ci.arg)
polygon.arg <- modifyList(polygon.arg, list(x = c(x,
rev(x)), y = c(high, rev(low))))
do.call(polygon, polygon.arg)
}
else if (ci == "bars") {
range <- diff(range(x))/300
segments.arg <- modifyList(ci.arg, list(x0 = x, y0 = high,
x1 = x, y1 = low))
do.call(segments, segments.arg)
do.call(segments, segments.arg)
do.call(segments, segments.arg)
}
lines.arg <- modifyList(list(lty = 2, col = plot.arg$col),
ci.arg)
do.call(lines, lines.arg)
lines.arg <- modifyList(lines.arg, list(x = x, y = low))
do.call(lines, lines.arg)
}
if (!is.null(noeff))
abline(h = noeff)
lines.arg <- modifyList(lines.arg, list(x = x, y = high))
range, y0 = high, x1 = x + range, y1 = high))
}
range, y0 = low, x1 = x + range, y1 = low))
segments.arg <- modifyList(segments.arg, list(x0 = x -
else if (ci == "lines") {
segments.arg <- modifyList(segments.arg, list(x0 = x -
source('D:/LearnR/Laurel/mycrosspred.R', echo=TRUE)
mycrosspred(pred3.temp, "overall", xlab="Temperature", key.title=title("RR"),
mycrosspred(pred3.temp, "overall", xlab="Temperature", key.title=title("RR"),
plot.title=title("Contour plot",xlab="Temperature",ylab="Lag"),ylim=c(0,4),ref=1)
source('D:/LearnR/Laurel/mycrosspred.R', echo=TRUE)
source('D:/LearnR/Laurel/mycrosspred.R', echo=TRUE)
mycrosspred(pred3.temp, "overall", xlab="Temperature", key.title=title("RR"),
plot.title=title("Contour plot",xlab="Temperature",ylab="Lag"),ylim=c(0,4),ref=1)
source('D:/LearnR/Laurel/mycrosspred.R', echo=TRUE)
myplot(pred3.temp, "overall", xlab="Temperature", key.title=title("RR"),
plot.title=title("Contour plot",xlab="Temperature",ylab="Lag"),ylim=c(0,4),ref=1)
myplot.crosspred(pred3.temp, "overall", xlab="Temperature", key.title=title("RR"),
plot.title=title("Contour plot",xlab="Temperature",ylab="Lag"),ylim=c(0,4),ref=1)
mycrosspred(pred3.temp, "overall", xlab="Temperature", key.title=title("RR"),
plot.title=title("Contour plot",xlab="Temperature",ylab="Lag"),ylim=c(0,4),ref=1)
plot.new
mycrosspred(pred3.temp, "overall", xlab="Temperature", key.title=title("RR"),
plot.title=title("Contour plot",xlab="Temperature",ylab="Lag"),ylim=c(0,4),ref=1)
?fci
plot(x^2)
plot(1:10)
plot(1)
mean(1,2)
sum(1,2,3)
10 % 4
10 %% 4
1 != 0
q()
sum(1,2,3,4)
mean(1,2)
?mean
?average
?aver
?ave
ave(1,2)
Im((-1)^0.5)
(-1)^0.5
paste("hey","there")
paste(“you”,”are”,”pretty”,”cool”,”yourself”)
paste("you","are","pretty","cool","yourself")
TRUE & FALSE
plot(2,4)
?plot
toupper("b2001")
as.logical(2)
as.logical("0")
as.logical(0)
as.logical("1")
(800/200)/(50/50)
(800/50)(200/50)
(800/50)/(200/50)
x <- c(1,2,3)
mode(x)
mean(x)
median(x)
x <- c(1,1,2,3)
mode(x)
mean(x)
mode(x)
mean(x)
median(x)
y <- list(1,1,2,3)
mode(y)
summary(y)
summary(x)
as.vector(y)
vector(y)
c(y)
unlist(y)
unlist(y)[1]
as.list(x)
y
hist(x)
table(x)
table(y)
density(x)
barplot(table(x))
density(x)
summary(x)
?density
append(x,3)
length(x)
length(y)
ecdf(x)
plot(ecdf(x))
qqplot(x)
library(sp)
library(rgeos)
library(rgdal)
setwd("C:/GitHub/Greensboro")
guilford <- readOGR("data/gis","tl_2010_37081_tabblock10")
greensboro <- guilford[guilford$UACE10 %in% "35164",]
landfills <- readOGR("data/gis/whiteStreetLandfill.kml",layer="Polygons")
census <- read.csv("data/census/DEC_10_SF1_QTP6_with_ann.csv")
header <- names(census)
census <- read.csv("data/census/DEC_10_SF1_QTP6_with_ann.csv",skip=2,header=FALSE)
?read.csv
census <- read.csv("data/census/DEC_10_SF1_QTP6_with_ann.csv")
header <- names(census)
census <- read.csv("data/census/DEC_10_SF1_QTP6_with_ann.csv",skip=2,header=FALSE)
names(census) <- header
census2 <- census
census2
census <- read.csv("data/census/DEC_10_SF1_QTP6_with_ann.csv",skip=2,header=FALSE)
census <- read.csv("data/census/DEC_10_SF1_QTP6_with_ann.csv",skip=2,header=FALSE)
names(census) <- names(read.csv("data/census/DEC_10_SF1_QTP6_with_ann.csv",nrows=1)
)
head(census)
race$pop.total <- as.numeric(census$HD01_S01)  # total population
race <- data.frame(pop.total=as.numeric(census$HD01_S01)  # total population
)
race$pop.black <- as.numeric(census$HD01_S06)  # alone/incombination
race$pct.black <- as.numeric(as.character(census$HD02_S06))  # value from the census
race$geoid <- as.character(census$GEO.id2)
race$geoid <- as.character(census$GDO.id2)
rm(race)
race$geoid <- as.character(census$GDO.id2)
race <- data.frame(geoid=as.character(census$GDO.id2))
race$pop.total <- as.numeric(census$HD01_S01))  # total population
race$pop.total <- as.numeric(census$HD01_S01)  # total population
dim(census)
dim(race)
race <- data.frame(geoid=as.character(census$GEO.id2))
race$pop.total <- as.numeric(census$HD01_S01)  # total population
race$pop.black <- as.numeric(census$HD01_S06)  # alone/incombination
race$pct.black <- as.numeric(as.character(census$HD02_S06))  # value from the census
race <- data.frame(geoid = as.character(census$GEO.id2),
race$pop.total = as.numeric(census$HD01_S01),  # total population
race$pop.black = as.numeric(census$HD01_S06),  # alone/incombination
race$pct.black = as.numeric(as.character(census$HD02_S06)))  # pct
race <- data.frame(geoid = as.character(census$GEO.id2),
race$pop.total = as.numeric(census$HD01_S01),  # total population
race <- data.frame(geoid = as.character(census$GEO.id2),
pop.total = as.numeric(census$HD01_S01),  # total population
pop.black = as.numeric(census$HD01_S06),  # alone/incombination
pct.black = as.numeric(as.character(census$HD02_S06)))  # pct
head(race)
race <- data.frame(geoid = as.character(census$GEO.id2),
total = as.numeric(census$HD01_S01),  # total population
black = as.numeric(census$HD01_S06),  # alone/incombination
pct = as.numeric(as.character(census$HD02_S06)))  # pct
names(race)
names(greensboro)
race <- race[match(as.character(greensboro$GEOID10, race$geoid),]  # re-order
race <- race[match(as.character(greensboro$GEOID10), race$geoid),]  # re-order
greensboro@data <- data.frame(greensboro@data,race)
save(greensboro,landfills,file="greensboro.RData")
race <- data.frame(geoid = as.character(census$GEO.id2),
total = as.numeric(census$HD01_S01),  # total population
black = as.numeric(census$HD01_S06),  # alone/incombination
pct = as.numeric(as.character(census$HD02_S06)))  # pct
# append data to gis dataset
race <- race[match(as.character(greensboro$GEOID10), race$geoid),]  # re-order
greensboro@data <- data.frame(greensboro@data,race)
# export to native R format
save(greensboro,landfills,file="greensboro.RData")
source("C:/GitHub/Louisiana/script/lib/restrict.R")
source("C:/GitHub/Louisiana/script/lib/polygons_experimental.R")
source("C:/GitHub/Louisiana/script/lib/polygons.R")
TRUE | FALSE
source('C:/GitHub/Louisiana/script/lib/restrict.R', echo=TRUE)
source('C:/GitHub/Louisiana/script/lib/polygons.R', echo=TRUE)
source("C:/GitHub/Louisiana/script/lib/restrict.R")
source("C:/GitHub/Louisiana/script/lib/polygons.R")
lf.cents <- gCentroid(lf)
load("C:/GitHub/Greensboro/greensboro.RData")
lf.cents <- gCentroid(lf)
landfill.centroids <- gCentroid(landfill)
landfill.centroids <- gCentroid(landfills)
plot(landfill.centroids)
landfill.centroids <- gCentroid(landfills,byid=TRUE)
plot(landfill.centroids)
hazards <- gCentroid(landfills,byid=TRUE)
blocks <- spTransform(greensboro,CRS(proj))
projection <- "+proj=lcc +lat_1=34.33333333333334 +lat_2=36.16666666666666 +lat_0=33.75 +lon_0=-79 +x_0=609601.2199999999 +y_0=0 +ellps=GRS80 +datum=NAD83 +to_meter=0.3048006096012192 +no_defs"
feet.projection <- "+proj=lcc +lat_1=34.33333333333334 +lat_2=36.16666666666666 +lat_0=33.75 +lon_0=-79 +x_0=609601.2199999999 +y_0=0 +ellps=GRS80 +datum=NAD83 +to_meter=0.3048006096012192 +no_defs"
blocks <- spTransform(greensboro,CRS(feet.projection))
proj4string(hazards)
hazards <- dpTransform(gCentroid(landfills,byid=TRUE),CRS(feet.projection))
hazards <- spTransform(gCentroid(landfills,byid=TRUE),CRS(feet.projection))
gb.bayes <- PolygonsProximity(gb.blocks,lf.cents,d=3*5280)
gb.bayes <- PolygonsProximity(blocks,hazards,d=3*5280)
source('C:/GitHub/Louisiana/script/lib/restrict.R')
source('C:/GitHub/Louisiana/script/lib/polygons.R')
gb.bayes <- PolygonsProximity(blocks,hazards,d=3*5280)
gb.bayes <- PolygonsProximity(blocks,hazards,d=3*5280)
n
gb.bayes <- PolygonsProximity(blocks,hazards,d=3*5280)
gb.bayes <- PolygonsProximity(blocks,hazards,d=3*5280)
ls()
hazards <- RestrictPoints(poly,pts,d=max(d))
debug(RestrictPoints)
gb.bayes <- PolygonsProximity(blocks,hazards,d=3*5280)
source('C:/GitHub/Louisiana/script/lib/restrict.R')
source('C:/GitHub/Louisiana/script/lib/restrict.R')
gb.bayes <- PolygonsProximity(blocks,hazards,d=3*5280)
save(gb.bayes,file="C:/GitHub/Greensboro/bayes.RData")
head(gb.bayes)
names(gb.bayes)
colnames(gb.bayes)
colnames(gb.bayes[[1]])
?resample
length(greensboro)
black <- greensboro$black[1]
white <- greensboro$total[1] - greensboro$black[1]
black
white
dlist <- gb.bayes[[1]]
total <- greensboro$total[1]
race <- rep(0,total)
white <- greensboro$total[1] - greensboro$black[1]
race <- c(rep(0,white),rep(1,black))
race
?sample
colnames(gb.bayes[[1]])
dmin <- sample(dlist$d,lenth(race),replace=TRUE)
dlist$d
dmin <- sample(df$d,lenth(race),replace=TRUE)
df <- gb.bayes[[1]]
dmin <- sample(df$d,lenth(race),replace=TRUE)
df$d
df
df$d
df["d"]
df[["d"]]
df
df[,1]
dmin <- sample(df[,1],lenth(race),replace=TRUE)
dmin <- sample(df[,1],length(race),replace=TRUE)
dmin
apply(df,2,function(i) sample(i,length(race),replace=TRUE))
mat <- apply(df,2,function(i) sample(i,length(race),replace=TRUE))
resample.block <- function(black,white,df) {
race <- c(rep(0,white),rep(1,black))
apply(df,2,function(i) sample(i,length(race),replace=TRUE))
}
?lapply
length(gb.bayes)
lapply(1:length(gb.bayes) function(i) resample.block(greensboro$black[i],greensboro$total[i]-greensboro$black[i], gb.bayes[[i]]))
lapply(1:length(gb.bayes), function(i) resample.block(greensboro$black[i],greensboro$total[i]-greensboro$black[i], gb.bayes[[i]]))
test <- lapply(1:length(gb.bayes), function(i) resample.block(greensboro$black[i],greensboro$total[i]-greensboro$black[i], gb.bayes[[i]]))
length(test)
test[[1]]
test <- lapply(1:length(gb.bayes), function(i) resample.block(greensboro$black[i],greensboro$total[i]-greensboro$black[i], gb.bayes[[i]]),simplify=TRUE)
test <- sapply(1:length(gb.bayes), function(i) resample.block(greensboro$black[i],greensboro$total[i]-greensboro$black[i], gb.bayes[[i]]),simplify=TRUE)
length(test)
test[[1]]
test <- sapply(1:length(gb.bayes), function(i) resample.block(greensboro$black[i],greensboro$total[i]-greensboro$black[i], gb.bayes[[i]]))
length(test)
test <- lapply(1:length(gb.bayes), function(i) resample.block(greensboro$black[i],greensboro$total[i]-greensboro$black[i], gb.bayes[[i]]))
test2 <- unlist(test)
head(test2)
?unlist
test2 <- unlist(test,recursive=FALSE)
head(test2)
test2 <- unlist(test,recursive=FALSE,use.names=TRUE)
head(test2)
test2
test[[1]]
test2 <- data.frame(unlist(test),ncol=2
head(test2)
head(test2)
test2 <- data.frame(unlist(test),ncol=2)
head(test2)
test2 <- matrix(unlist(test),ncol=2)
head(test2)
test2 <- matrix(unlist(test),ncol=2,byrow=TRUE)
head(test2)
test2 <- matrix(unlist(test),ncol=2,byrow=FALSE)
head(test2)
?matrix
tail(test2)
tail(test)
tail(unlist(test))
tail(unlist(test,recursive=TRUE))
tail(unlist(test,recursive=FALSE))
?do.call
test2 <- do.call(rbind,test)
test2
resample.block <- function(n0,n1,df) {
race <- c(rep(0,n0),rep(1,n1))
apply(df,2,function(i) sample(i,length(race),replace=TRUE))
}
resample <- function(n0,n1,bayes) {
do.call(rbind,lapply(1:lenth(bayes), function(i) resample.block(n0[i],n1[i],bayes[[i]])))
}
test3 <- resample(n0=greensboro$total-greensboro$black,n1=greensboro$black,bayes=gb.bayes)
resample <- function(n0,n1,bayes) {
do.call(rbind,lapply(1:length(bayes), function(i) resample.block(n0[i],n1[i],bayes[[i]])))
}
test3 <- resample(n0=greensboro$total-greensboro$black,n1=greensboro$black,bayes=gb.bayes)
head(test3)
resample.block <- function(n0,n1,df) {
race <- c(rep(0,n0),rep(1,n1))
cbind(race,apply(df,2,function(i) sample(i,length(race),replace=TRUE)))
}
resample <- function(n0,n1,bayes) {
do.call(rbind,lapply(1:length(bayes), function(i) resample.block(n0[i],n1[i],bayes[[i]])))
}
test3 <- resample(n0=greensboro$total-greensboro$black,n1=greensboro$black,bayes=gb.bayes)
black <- greensboro$black[1]
white <- greensboro$total[1] - greensboro$black[1]
resample.block(white,black,df)
resample <- function(n0,n1,bayes) {
do.call(rbind,lapply(1:length(bayes), function(i) resample.block(n0[i],n1[i],bayes[[i]])))
}
test3 <- resample(n0=greensboro$total-greensboro$black,n1=greensboro$black,bayes=gb.bayes)
resample <- function(n0,n1,bayes) {
lapply(1:length(bayes), function(i) resample.block(n0[i],n1[i],bayes[[i]]))
}
test3 <- resample(n0=greensboro$total-greensboro$black,n1=greensboro$black,bayes=gb.bayes)
do.call(rbind,test3)
test3[11]
test3[12]
test3[10]
test3[13]
test3[14]
test3[15]
bayes[[12]]
gb.bayes[[12]]
test3[12]
gb.bayes[[12]]
greensboro$white[12]
greensboro$black[12]
greensboro$total[12]
populated <- greensboro$total > 0
table(populated)
populated <- greensboro$total > 0
greensboro <- greensboro[populated]
greensboro <- greensboro[populated,]
gb.bayes <- bayes[[populated]]
gb.bayes <- gb.bayes[[populated]]
gb.bayes <- gb.bayes[populated]
length(gb.bayes)
do.call(rbind,test3)
test3 <- resample(n0=greensboro$total-greensboro$black,n1=greensboro$black,bayes=gb.bayes)
do.call(rbind,test3)
test3[128]
greensboro$black[128]
greensboro$total[128]
test3[127]
test3[129]
test3[128]
test3[127]
test3[129]
greensboro$black[128]
greensboro$total[128]
dim(test3)
length(test3)
test3 <- resample(n0=greensboro$total-greensboro$black,n1=greensboro$black,bayes=gb.bayes)
do.call(rbind,test3)
test3[128]
test3 <- resample(n0=greensboro$total-greensboro$black,n1=greensboro$black,bayes=gb.bayes)
test3[128]
test3[129]
test3[128]
cbind(1,c(1,2))
?matrix
?cbind
cbind(1,c(1,2))
?matrix
cbind(1,data.frame(c(1,2)))
cbind(1,matrix(c(1,2)))
cbind(1,matrix(c(1,2),ncol=2))
resample.block <- function(n0,n1,df) {
race <- c(rep(0,n0),rep(1,n1))
mat <- matrix(apply(df,2,function(i) sample(i,length(race),replace=TRUE)),ncol=2)
cbind(race,mat)
}
resample <- function(n0,n1,bayes) {
lapply(1:length(bayes), function(i) resample.block(n0[i],n1[i],bayes[[i]]))
}
test3 <- resample(n0=greensboro$total-greensboro$black,n1=greensboro$black,bayes=gb.bayes)
do.call(rbind,test3)
resample <- function(n0,n1,bayes) {
res <- lapply(1:length(bayes), function(i) resample.block(n0[i],n1[i],bayes[[i]]))
do.call(rbind,res)
}
test3 <- resample(n0=greensboro$total-greensboro$black,n1=greensboro$black,bayes=gb.bayes)
length(test3)
sum(greensboro$total)
head(test3)
sum(greensboro$total)
resample <- function(n0,n1,bayes) {
lapply(1:length(bayes), function(i) resample.block(n0[i],n1[i],bayes[[i]]))
}
test3 <- resample(n0=greensboro$total-greensboro$black,n1=greensboro$black,bayes=gb.bayes)
length(test3)
test3[[1]]
greensboro$white <- greensboro$total - greensboro$black
sum(greensboro$white)
sum(greensboro$black)
sum(greensboro$total)
resample.block <- function(n0,n1,df) {
race <- c(rep(0,n0),rep(1,n1))
mat <- matrix(apply(df,2,function(i) sample(i,length(race),replace=TRUE)),ncol=2)
cbind(race,mat)
}
resample.block(white,black,df)
resample <- function(n0,n1,bayes) {
lapply(1:length(bayes), function(i) resample.block(n0[i],n1[i],bayes[[i]]))
}
test3 <- resample(n0=greensboro$white,n1=greensboro$black,bayes=gb.bayes)
test3[[1]]
length(test3)
length(do.call(rbind,test3))
935430/331810
test3[[1]]
test4 <- do.call(rbind,test3))
test4 <- do.call(rbind,test3)
head(test4)
tail(test4)
dim(test4)
resample <- function(n0,n1,bayes) {
do.call(rbind,lapply(1:length(bayes), function(i) resample.block(n0[i],n1[i],bayes[[i]])))
}
test3 <- resample(n0=greensboro$white,n1=greensboro$black,bayes=gb.bayes)
dim(test3)
311810*3
result <- resample(n0=greensboro$white,n1=greensboro$black,bayes=gb.bayes)
result
?aggregate
apply(result[,-1],2, function(i) aggregate(i,by=result[,1],mean))
apply(result[,-1],2, function(i) aggregate(i,by=list(result[,1]),mean))
agg <- function(result) {
res <- apply(result[,-1],2, function(i) aggregate(i,by=list(result[,1]),mean))
}
agg(result)
agg <- function(result) {
res <- apply(result[,-1],2, function(i) aggregate(i,by=list(result[,1]),mean))
do.call(cbind,res)
}
agg(result)
agg <- function(result) {
res <- apply(result[,-1],2, function(i) aggregate(i,by=list(result[,1]),mean))
res <- do.call(cbind,res)
res <- res[c(1,seq(from=2,to=dim(res)[2],by=2))] # remove redeundant columns
res
}
agg(result)
names(gb.bayes)
names(gb.bayes[[1]])
colnames(gb.bayes[[1]])
?calculate
calculate <- function(n0,n1,bayes) {
result <- resample(n0,n1,bayes)
tab <- apply(result[,-1],2, function(i) aggregate(i,by=list(result[,1]),mean))
tab <- do.call(cbind,res)
tab <- res[c(1,seq(from=2,to=dim(res)[2],by=2))] # remove redeundant columns
colnames(tab) <- c("Group",colnames(bayes[[1]]))
tab
}
calculate(n0=greensboro$white,n1=greensboro$black,bayes=gb.bayes)
calculate <- function(n0,n1,bayes) {
result <- resample(n0,n1,bayes)
tab <- apply(result[,-1],2, function(i) aggregate(i,by=list(result[,1]),mean))
tab <- do.call(cbind,tab)
tab <- tab[c(1,seq(from=2,to=dim(tab)[2],by=2))] # remove redeundant columns
colnames(tab) <- c("Group",colnames(bayes[[1]]))
tab
}
calculate(n0=greensboro$white,n1=greensboro$black,bayes=gb.bayes)
source('C:/GitHub/Louisiana/script/lib/restrict.R')
source('C:/GitHub/Louisiana/script/lib/polygons.R')
source('C:/GitHub/Louisiana/script/lib/polygons.R')
